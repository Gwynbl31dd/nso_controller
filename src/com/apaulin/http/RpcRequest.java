/**
 * 
 */
package com.apaulin.http;

import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.util.List;

import org.apache.commons.codec.Charsets;
import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpHeaders;
import org.apache.http.HttpResponse;
import org.apache.http.client.CookieStore;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.protocol.HttpClientContext;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.ssl.SSLContextBuilder;
import org.apache.http.ssl.TrustStrategy;
import org.apache.http.util.EntityUtils;

import com.apaulin.http.rpc.GetTrans;
import com.apaulin.http.rpc.RPCRequest;
import com.apaulin.xplorer.exception.NSOException;
import com.jayway.jsonpath.JsonPath;

import net.minidev.json.JSONArray;
import net.minidev.json.JSONObject;
import net.minidev.json.parser.JSONParser;
import net.minidev.json.parser.ParseException;

/**
 * @author Anthony Paulin
 * @since 10/07/2018
 * @version 0.3
 *
 */
public class HttpRequest {

	private static final String RPC_VERSION = "2.0";// NSO RPC Version
	private HttpClientContext context;// Connection context
	private HttpPost httpPost;// POST object
	private int id;// Session ID

	/**
	 * Build a new HTTP request
	 * 
	 * @param addr
	 *            <String> address of the jsonRPC API
	 * @param user
	 *            <String> username
	 * @param password
	 *            <String> password
	 * @param id
	 *            <String> connection ID
	 * @throws NSOException  
	 */
	public HttpRequest(String addr, String user, String password, int id) throws NSOException {
		this.id = id;
		this.context = new HttpClientContext();
		this.httpPost = new HttpPost(addr);
		this.httpPost.setHeader(HttpHeaders.CONTENT_TYPE, "application/json");
		this.context.setCookieStore(getRPCCookie(user, password, addr));// Use the cookies generated by the auth
	}

	/**
	 * Post a request
	 * 
	 * @param request
	 *            Implementation of RPCRequest
	 * @return <String> decoded header
	 * @throws NSOException 
	 */
	public String postRequest(RPCRequest request) throws NSOException {
		String responseGenerated = null;
		try {
			request.setId(this.id);
			StringEntity params = request.getRequestEntity();
			httpPost.setEntity(params);
			CloseableHttpClient client = buildCustomHttpClient();
			CloseableHttpResponse response = client.execute(httpPost, context);
			responseGenerated = decodeHeader(response);
			//System.out.println(responseGenerated);
		}
		catch(IOException e ) {
			throw new NSOException(e);
		}
		return responseGenerated;
	}

	/**
	 * Return the current transaction number
	 * 
	 * @throws NSOException 
	 */
	public List<Integer> getTransaction() throws NSOException {
		List<Integer> th = JsonPath.read(this.postRequest(new GetTrans()), "$.result.trans[*].th");
		return th;
	}

	/**
	 * Decode the HTTP Header to extract the JSON date
	 * 
	 * @param response
	 *            CloseableHttpResponse response from the request
	 * @return String representation of the JSON data
	 * @throws org.apache.http.ParseException
	 * @throws IOException
	 */
	private String decodeHeader(CloseableHttpResponse response) throws IOException {
		// Get the entity to decode the response
		HttpEntity entity = response.getEntity();
		// Get the encoding
		Header encodingHeader = entity.getContentEncoding();
		Charset encoding = encodingHeader == null ? StandardCharsets.UTF_8
				: Charsets.toCharset(encodingHeader.getValue());
		return EntityUtils.toString(entity, encoding);
	}

	/**
	 * Return the configuration
	 * 
	 * @param path
	 * @param th
	 * @return
	 * @throws NSOException 
	 */
	public String getConfig(String path, int th) throws NSOException {
		JSONObject jO = null;
		try {
			StringEntity params = new StringEntity("{\"jsonrpc\":\"" + RPC_VERSION + "\",\"id\":" + id
					+ ",\"method\":\"show_config\",\"params\":{\"th\": " + th + ",\"path\":\"" + path + "\"}}");
			httpPost.setEntity(params);
			CloseableHttpClient client = buildCustomHttpClient();
			CloseableHttpResponse response = client.execute(httpPost, context);
			String json = decodeHeader(response);
			JSONParser parser = new JSONParser(JSONParser.MODE_JSON_SIMPLE);
			JSONObject obj = (JSONObject) parser.parse(json);
			JSONArray array = new JSONArray();
			array.add(obj);
			json = array.get(0).toString();
			jO = JsonPath.parse(json).read("$.result", JSONObject.class);
			client.close();
		} catch (IOException | ParseException e) {
			throw new NSOException(e);
		}
		return jO.toJSONString();
	}

	/**
	 * Generate a session cookie
	 * 
	 * @param user
	 *  -          username
	 * @param password
	 *  -          password
	 * @param addr
	 *  -          addresse for the RPC connection
	 * @return a CookieStore representation
	 * @throws NSOException 
	 */
	private CookieStore getRPCCookie(String user, String password, String addr) throws NSOException  {
		CookieStore cookieStore = null;
		try {
		CloseableHttpClient client = buildCustomHttpClient();
		StringEntity params = new StringEntity("{\"jsonrpc\":\"" + RPC_VERSION + "\",\"id\":" + id
				+ ",\"method\":\"login\",\"params\":{\"user\":\"" + user + "\",\"passwd\":\"" + password + "\"}}", "UTF-8");
		httpPost.setEntity(params);
		httpPost.setHeader("Accept-Encoding", "UTF-8");
		HttpResponse response = client.execute(httpPost, context);
		cookieStore = context.getCookieStore();
		client.close();
		}
		catch(IOException e) {
			throw new NSOException(e);
		}
		return cookieStore;
	}

	// ************************************GETTER/SETTER******************************************************
	public HttpClientContext getContext() {
		return context;
	}

	public void setContext(HttpClientContext context) {
		this.context = context;
	}

	public HttpPost getHttpPost() {
		return httpPost;
	}

	public void setHttpPost(HttpPost httpPost) {
		this.httpPost = httpPost;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public static String getRpcVersion() {
		return RPC_VERSION;
	}

	// ********************************************************************************************************
	public String toString() {
		return "HTTPRequest JSONRPC version " + getRpcVersion() + "\n" + "Connection to :"
				+ getContext().getCookieOrigin() + "\n" + "Session ID :" + getId();
	}
	
	@SuppressWarnings("deprecation")
	private CloseableHttpClient buildCustomHttpClient() throws NSOException {
		SSLConnectionSocketFactory sslsf = null;
		try {
			SSLContextBuilder builder = new SSLContextBuilder();
			builder.loadTrustMaterial(null, new TrustStrategy() {
				public boolean isTrusted(java.security.cert.X509Certificate[] arg0, String arg1)
						throws java.security.cert.CertificateException {
					return true;
				}
			});
			sslsf = new SSLConnectionSocketFactory(builder.build(),
					SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
		} catch (KeyStoreException | KeyManagementException | NoSuchAlgorithmException e) {
			throw new NSOException(e);
		}
		return HttpClients.custom().setSSLSocketFactory(sslsf).build();
	}
}
